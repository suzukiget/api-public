<aside class="notice">
** NOTE: COBINHOOD IS CURRENTLY UNDER HEAVY DEVELOPMENT, APIs ARE SUBJECT TO CHANGE WITHOUT PRIOR NOTICE **
</aside>

# Overview
COBINHOOD RESTful API URL: `https://api.cobinhood.com`

COBINHOOD WebSocket API URL: `wss://feed.cobinhood.com/ws` [Will be removed in June, 2018]
COBINHOOD WebSocket V2 API URL: `wss://ws.cobinhood.com/v2/ws`

## HTTP Request Headers
`nonce` for 'POST' 'UPDATE' 'DELETE'. Accept nonce in millisecond unix time format. ex: `1518166662197`
`authorization`  for APIs that require authentication, value should be the API key token you obtain from the API key page in COBINHOOD exchange.

## Timestamps
All timestamps exchanged between client and server are based on server Unix UTC timestamp. Please refer to System Module for retrieving server timestamp.

## Floating Point Values
All floating point values in responses are encoded in `string` type to avoid loss of precision.

## Authentication
COBINHOOD uses token for APIs that require authentication. Token header field name is `authorization`. The JWT can be generated and revoked on COBINHOOD exchange API console page.

## Successful API Response

```json
{
    "success": true,
    "result": {
        "<object name>": {
            ...
        }
    }
}
```

All responses from API contain a JSON object field named `result`:

A successful response should have HTTP status codes ranging from 100 to 399, and a boolean `success` field with value `true`. Clients should find the response as a JSON object within the `result` object, containing the name of the requested object as the key:

## Unsuccessful Response

```json
{
    "success": false,
    "error": {
        "error_code": "error_code_string"
    }
}
```

An unsuccessful response would result in HTTP status codes ranging from 400 to 599, and a boolean `success` field with value `false`. If `success` is `false`, an `error` object member containing information that describes the error can be found in the root object:

## Rate-limiting
All API requests are rate-limited.

## Custom Query & Pagination
APIs equipped with custom query functionality enable users to query with different `filter`, `order`, `limit` and `page`.

### Query Parameters

  + `filter`: object
    + `and`: array
    + `or`: array
    + `not_equal`: object
      + `column`: column to filter on
        + string
      + `value`: the value to fitler with
        + ['string', 'number']
    + `like`: object
      + `column`: column to filter on
        + string
      + `value`: the value to fitler with
        + ['string', 'number']
    + `ilike`: object
      + `column`: column to filter on
        + string
      + `value`: the value to fitler with
        + ['string', 'number']
    + `smaller_than`: object
      + `column`: column to filter on
        + string
      + `value`: the value to fitler with
        + ['string', 'number']
    + `greater_than_or_equal`: object
      + `column`: column to filter on
        + string
      + `value`: the value to fitler with
        + ['string', 'number']
    + `in`: object
      + `column`: column to filter on
        + string
      + `value`: the value to fitler with
        + ['string', 'number']
    + `equal`: object
      + `column`: column to filter on
        + string
      + `value`: the value to fitler with
        + ['string', 'number']
    + `between`: object
      + `column`: column to filter on
        + string
      + `value`: array of values with length 2
    + `greater_than`: object
      + `column`: column to filter on
        + string
      + `value`: the value to fitler with
        + ['string', 'number']
    + `smaller_than_or_equal`: object
      + `column`: column to filter on
        + string
      + `value`: the value to fitler with
        + ['string', 'number']
  + `limit`: limit
    + integer
  + `page`: page number
    + integer
  + `order`: object
    + `column`: column name
      + string
    + `keyword`: [`asc`, `desc`]
      + string

### Filter
> Ex. 1: `Where column_a = 'A'`

```json
{
	"equal": {
		"column": "column_a",
		"value": "A"
	}
}
```

> Ex. 2: `Where ((column_a = 'A') AND (column_b != 'B'))`

```json
{
	"and": [
		{
			"equal": {
				"column": "column_a",
				"value": "A"
			}
		},{
			"not_equal": {
				"column": "column_b",
				"value": "A"
			}
		}
	]
}
```

Pass the JSON stringified object as the `filter` query parameter in url to filter the queried data.
Filter object is a nested JSON object that will be evaluated to `Where` arguments in a SQL query. Each layer is a single-key map, with operator as the key and parameters as the value. There are two kinds of filters (operators), comparison filters and logic filters. Comparison filter is the atomic element of a filter and logic filter is to combine multiple filters into one single filter.

The allowed column, values and operators can differ in APIs according to different use cases.

### Comparison Operators:
- `equal`
- `not_equal`
- `greater_than`
- `greater_than_or_equal`
- `smaller_than`
- `smaller_than_or_equal`
- `in`
- `like`
- `ilike`
- `between`

### Logic Operators:

- `and`
- `or`

### Order

Pass the JSON stringified JSON array as the `order` query parameter in url to order the queried data.
Order array will be evaluated to `ORDER BY` arguments in a SQL query. Each element is a order object with column to order by and the order keyword(`asc`|`desc`).

The allowed column, values and operators can differ in APIs according to different use cases.

> Ex. `ORDER BY column_a ASC`

```json
[
	{
		"column":"column_a",
		"keyword":"asc"
	}
]
```

### Pagination

Pass `limit` and `page` query parameter to specify the pagination. Page starts from `1` and the maximum `limit` is `100`

{%- macro schema_comment(schema, level=1) %}
{%- if schema.type == 'object' %}
{%- if schema.properties %}
{{- render_properties(schema, schema.properties, level) }}
{%- elif schema.patternProperties %}
{{- render_properties(schema, schema.patternProperties, level) }}
{%- endif %}
{%- elif schema.type == 'array' -%}
{{- schema_comment(schema['items'], level) }}
{%- elif schema.enum %}
{{ '  ' * level }}+ enum {{ schema.enum | replace('\'', '\x60') }}
{%- else %}
{{ '  ' * level }}+ {{ schema.type }}
{%- endif %}
{%- endmacro %}

{%- macro render_properties(schema, properties, level) %}
{%- for p, s in properties.iteritems() %}
{%- if s.comment %}
{{ '  ' * level }}+ `{{ p }}`: {{ s.comment }}
{%- if s.enum %}
{{ '  ' * (level+ 1) }}+ enum {{ s.enum | replace('\'', '\x60') }}
{%- else %}
{{ '  ' * (level + 1) }}+ {{ s.type }}
{%- endif %}
{%- else %}
{{ '  ' * level }}+ `{{ p }}`: {{ s.type }}
{%- if s.enum %}
{{ '  ' * (level+ 1) }}+ enum {{ s.enum | replace('\'', '\x60') }}
{%- endif %}
{%- endif %}
{%- if s.type in ['object', 'array'] %}
{{- schema_comment(s, level + 1) }}
{%- endif %}
{%- endfor %}
{%- endmacro %}

{% macro module_section(section, prefix) %}

{%- for ep in data[section].keys() | sort %}
{%- set methods = data[section][ep] %}
{%- if ep.startswith(prefix) %}
{%- for method, info in methods.iteritems() %}
{%- if info.DocScope == 'External' or info.DocScope == scope %}

## {{ info.Title }}

{% if info.Request -%}
{% for request in info.Request %}
> Sample Request

```json
{{ request.Example }}
```
{% endfor %}
{%- endif %}


{% if info.Response -%}
{% for response in info.Response %}
> Sample Response

```json
{{ response.Example }}
```
{% endfor %}
{%- endif %}

{%- if method != 'WS' %}
`{{ ep }} [{{ method }}]`
{%- endif %}

{{ info.Description }}

{% if scope == 'Internal' -%}
### Scopes
{%- for scope in info.Scopes %}
  + {{ scope -}}
{% endfor %}
{% endif %}
{% if info.PathParameters %}
### Path Parameters
{{- schema_comment(info.PathParameters) }}
{%- endif %}
{% if info.QueryParameters %}
### Query Parameters
{{- schema_comment(info.QueryParameters) }}
{%- endif %}

{% if info.Request -%}
### Request
{% for request in info.Request %}
{% if request.Comment -%}
**_{{ request.Comment }}_**
{%- endif %}
{% if request.Schema -%}
{{ schema_comment(request.Schema) }}
{%- endif %}
{%- endfor %}
{%- endif %}

{% if info.Response -%}
### Response
{% for response in info.Response %}
{% if response.Comment -%}
**_{{ response.Comment }}_**
{%- endif %}
{% if response.Schema -%}
{% if response.Schema.properties.result -%}
{{ schema_comment(response.Schema.properties.result) }}
{% else %}
{{ schema_comment(response.Schema) }}
{% endif-%}
{% endif-%}
{%- endfor %}
{% endif-%}

{%- endif %}
{%- endfor %}
{%- endif %}
{%- endfor %}

{%- endmacro %}

{%- for title in modules.keys() | sort %}
# {{ title }}
{%- for path in modules[title] %}
{{ module_section(service, path) }}
{%- endfor %}
{%- endfor %}
