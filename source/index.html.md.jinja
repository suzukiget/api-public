---
title: COBINHOOD Exchange - API Reference

language_tabs:
- http

toc_footers:
- <a href='https://cobinhood.com'>COBINHOOD</a>
- <a href='https://github.com/cobinhood/api-public/issues'>Report Issues</a>
---

<aside class="notice">
** NOTE: COBINHOOD IS CURRENTLY UNDER HEAVY DEVELOPMENT, APIs ARE SUBJECT TO CHANGE WITHOUT PRIOR NOTICE **
</aside>

# Overview
COBINHOOD RESTful API URL: `https://api.cobinhood.com`

COBINHOOD WebSocket API URL: `wss://feed.cobinhood.com/ws` [Will deprecate in June, 2018]
COBINHOOD WebSocket V2 API URL: `wss://ws.cobinhood.com/v2/ws`

## HTTP Request Headers
`nonce` for 'POST' 'UPDATE' 'DELETE'. Accept nonce in millisecond unix time format. ex: `1518166662197`
`authorization`  for APIs that require authentication, value should be the API key token you obtain from the API key page in COBINHOOD exchange.

## Timestamps
All timestamps exchanged between client and server are based on server Unix UTC timestamp. Please refer to System Module for retrieving server timestamp.

## Floating Point Values
All floating point values in responses are encoded in `string` type to avoid loss of precision.

## Authentication
COBINHOOD uses token for APIs that require authentication. Token header field name is `authorization`. The JWT can be generated and revoked on COBINHOOD exchange API console page.

## Successful API Response

```json
{
    "success": true,
    "result": {
        "<object name>": {
            ...
        }
    }
}
```

All responses from API contain a JSON object field named `result`:

A successful response should have HTTP status codes ranging from 100 to 399, and a boolean `success` field with value `true`. Clients should find the response as a JSON object within the `result` object, containing the name of the requested object as the key:

## Unsuccessful Response

```json
{
    "success": false,
    "error": {
        "error_code": "error_code_string"
    }
}
```

An unsuccessful response would result in HTTP status codes ranging from 400 to 599, and a boolean `success` field with value `false`. If `success` is `false`, an `error` object member containing information that describes the error can be found in the root object:

## Rate-limiting
All API requests are rate-limited.

## Pagination

> Request URL:

```
https://api.cobinhood.com/v1/trading/trades?limit=30&page=7
```

{%- macro schema_comment(schema, level=1) %}
{%- if schema.properties %}
{%- for p, s in schema.properties.iteritems() %}
{%- if s.comment or s.properties or s.enum or s.items %}
{%- if s.comment %}
{{ '  ' * level }}+ `{{ p }}`: {{ s.comment }}
{%- if s.enum %}
{{ '  ' * (level+ 1) }}+ enum {{ s.enum | replace('\'', '\x60') }}
{%- else %}
{{ '  ' * (level + 1) }}+ {{ s.type }}
{%- endif %}
{%- else %}
{{ '  ' * level }}+ `{{ p }}`: {{ s.type }}
{%- endif %}
{%- endif %}
{%- if s.type == 'object' -%}
{{ schema_comment(s, level + 1) }}
{%- endif %}
{%- if s.type == 'array' -%}
{{ schema_comment(s['items'], level + 1) }}
{%- endif %}
{%- endfor %}
{%- endif %}
{%- endmacro %}

{% macro module_section(prefix) %}

{%- for ep in data.api.keys() | sort %}
{%- set methods = data.api[ep] %}
{%- if ep.startswith(prefix) %}
{%- for method, info in methods.iteritems() %}
{%- if info.DocScope == 'External' or info.DocScope == scope %}

## {{ info.Title }}

`{{ ep }} [{{ method }}]`

    {{ info.Description }}

{% if scope == 'Internal' -%}
### Scopes
{%- for scope in info.Scopes %}
  + {{ scope -}}
{% endfor %}
{% endif %}
{% if info.PathParameters %}
### Path Parameters
{{- schema_comment(info.PathParameters) }}
{%- endif %}
{% if info.QueryParameters %}
### Query Parameters
{{- schema_comment(info.QueryParameters) }}
{%- endif %}
{% if info.RequestSchema -%}
> Payload

```json
{{ info.RequestExample }}
```

### Request
{{- schema_comment(info.RequestSchema) }}
{%- endif %}
{% if info.ResponseExample %}
> [Success] Response 200 (application/json)

```json
{{ info.ResponseExample }}
```

### Response
{{- schema_comment(info.ResponseSchema.properties.result) }}
{%- endif %}

{%- endif %}
{%- endfor %}
{%- endif %}
{%- endfor %}

{%- endmacro %}

# System
{{ module_section('/v1/system') }}

# Market
{{ module_section('/v1/market') }}

# Chart
{{ module_section('/v1/chart') }}

# Trading [Auth]
{{ module_section('/v1/trading') }}

# Wallet [Auth]
{{ module_section('/v1/wallet') }}
{{ module_section('/v1/fiat') }}

{% if scope == 'Internal' %}
# Account [Auth]
{{ module_section('/v1/account') }}
{{ module_section('/v1/kyc') }}

# Campaign [Auth]
{{ module_section('/v1/campaign') }}

# Kubernetes
{{ module_section('/alive') }}
{{ module_section('/ready') }}
{% endif %}


# WebSocket [Will deprecate in June, 2018]

## Order *[Auth]*

> **Request**

```json
{
  "action": "subscribe",
  "type": "order"
}
```

> **Response**

```json
{
  "event": "subscribed",
  "type": "order",
  "channel_id": CHANNEL_ID
}
```

> **Snapshot / Update**

```json
//update
{
    "channel_id": CHANNEL_ID,
    "update":
        [
            ORDER_ID,
            TRADING_PAIR_ID,
            STATUS,
            SIDE,
            TYPE,
            PRICE,
            SIZE,
            FILLED_SIZE,
            TIME_STAMP
         ]
}
```

+ `CHANNEL_ID`: The channel ID for event type
    + string
+ `ORDER_ID`: Order ID
    + string
+ `TRADING_PAIR_ID`: Trading pair ID
    + enum[`BTC-USDT`, ...]
+ `STATUS`: Order status
    + enum[`received`, `open`, `canceled`, `closed`]
+ `SIDE`: Order side
    + enum[`bid`, `ask`]
+ `TYPE`: Order type
    + enum[`market`, `limit`, `stop`, `stop_limit`]
+ `PRICE`: Quote price
    + string
+ `SIZE`: Base amount
    + string
+ `FILLED_SIZE`: Amount filled in current order
    + string
+ `TIME_STAMP`: Order timestamp in milliseconds
    + string

## Trades

After receiving the response, you will start receiving recent trade,
followed by any trade that occurs at COBINHOOD.

> **Request**

```json
{
  "action": "subscribe",
  "type": "trade",
  "trading_pair_id": TRADING_PAIR_ID
}
```

> **Response**

```json
{
  "event": "subscribed",
  "type": "trade",
  "channel_id": CHANNEL_ID,
  "trading_pair_id": TRADING_PAIR_ID
}
```
+ `CHANNEL_ID`: The channel ID for event type
    + string
+ `TRADING_PAIR_ID`: Trading pair ID
    + enum[`BTC-USDT`, `ETH-USDT`, ...]

> **Snapshot**

```json
{
    "channel_id": CHANNEL_ID,
    "snapshot":
        [
          [TRADE_ID, TIME_STAMP, PRICE, SIZE, MAKER_SIDE],
          ...
        ]
}
```

> **Update**

```json
{
    "channel_id": CHANNEL_ID,
    "update":
        [
          [TRADE_ID, TIME_STAMP, PRICE, SIZE, MAKER_SIDE],
          ...
        ]
}
```

+ `TRADING_PAIR_ID`: Subscribe trading pair ID
    + enum[`BTC-USDT`, `ETH-USDT`, ...]
+ `CHANNEL_ID`: Channel ID
    + string
+ `TRADE_ID`: Trade ID
    + string
+ `TIME_STAMP`: Trade timestamp in milliseconds
    + string
+ `PRICE`: Trade quote price
    + string
+ `SIZE`: Trade base amount
    + string
+ `MAKER_SIDE`: The order side
    + enum[`bid`, `ask`]

## Order book

After receiving the response, you will receive a snapshot of the book,
followed by updates upon any changes to the book.

> **Request**

```json
{
  "action": "subscribe",
  "type": "order-book",
  "trading_pair_id": TRADING_PAIR_ID
  "precision": PRECISION
}
```

> **Response**

```json
{
  "event": "subscribed",
  "type": "order-book",
  "channel_id": CHANNEL_ID,
  "trading_pair_id": TRADING_PAIR_ID
  "precision": PRECISION
}
```

> **Snapshot**

```json
//snapshot
{
    "channel_id": CHANNEL_ID,
    "snapshot":  {
        "bids": [
            [ PRICE, SIZE, COUNT ],
            ...
        ],
        "asks": [
            [ PRICE, SIZE, COUNT ],
            ...
        ]
    }
}
```

> **Update**

```json
//update
{
    "channel_id": CHANNEL_ID,
    "update":  {
        "bids": [
            [ PRICE, SIZE, COUNT ],
            ...
        ],
        "asks": [
            [ PRICE, SIZE, COUNT ],
            ...
        ]
    }
}
```

+ `TRADING_PAIR_ID`: Subscribe trading pair ID
    + enum[`BTC-USDT`, `ETH-USDT`, ...]
+ `CHANNEL_ID`: The channel id for event type
    + string
+ `TRADING_PAIR_ID`: Trading pair ID
    + enum[`BTC-USDT`, `ETH-USDT`, ...]
+ `CHANNEL_ID`: Channel ID
    + string
+ `PRICE`: Order price
    + string
+ `COUNT`: Order number
    + string
+ `SIZE`: Total amount
    + string
+ `PRECISION`: The precision of the target orderbook.
    + string

## Ticker

```json
{
  "action": "subscribe",
  "type": "ticker",
  "trading_pair_id": TRADING_PAIR_ID
}
```

> **Response**

```json
{
  "event": "subscribed",
  "type": "ticker",
  "channel_id": CHANNEL_ID,
  "trading_pair_id": TRADING_PAIR_ID
}
```

> **Snapshot**

```json
{
    "channel_id": CHANNEL_ID,
    "snapshot":
        [
          LAST_TRADE_ID,
          PRICE,
          HIGHEST_BID,
          LOWEST_ASK,
          24H_VOLUME,
          24H_HIGH,
          24H_LOW,
          24H_OPEN,
          TIME_STAMP
        ]
}
```

> **Update**

```json
{
    "channel_id": CHANNEL_ID,
    "update":
        [
          LAST_TRADE_ID,
          PRICE,
          HIGHEST_BID,
          LOWEST_ASK,
          24H_VOLUME,
          24H_HIGH,
          24H_LOW,
          24H_OPEN,
          TIME_STAMP
        ]
}
```

After receiving the response, you will receive a snapshot of the ticker,
 followed by updates upon any changes to the tickers.

+ `CHANNEL_ID`: The channel id for event type
    + string
+ `TRADING_PAIR_ID`: Trading pair ID
    + enum[`BTC-USDT`, `ETH-USDT`, ...]
+ `TRADING_PAIR_ID`: Subscribe trading pair ID
    + enum[`BTC-USDT`, `ETH-USDT`, ...]
+ `CHANNEL_ID`: Channel ID
    + string
+ `LAST_TRADE_ID`: Latest trade ID
    + string
+ `PRICE`: Latest trade price
    + string
+ `HIGHEST_BID`: Best bid price in current order book
    + string
+ `LOWEST_ASK`: Best ask price in current order book
    + string
+ `24H_VOLUME`: Trading volume of the last 24 hours
    + string
+ `24H_LOW`: Lowest trade price of the last 24 hours
    + string
+ `24H_HIGH`: Highest trade price of the last 24 hours
    + string
+ `TIME_STAMP`: Ticker timestamp in milliseconds
    + string

## Candle

> **Request**

```json
{
  "action": "subscribe",
  "type": "candle",
  "trading_pair_id": TRADING_PAIR_ID,
  "timeframe": TIMEFRAME
}
```

> **Response**

```json
{
  "event": "subscribed",
  "type": "candle",
  "channel_id": CHANNEL_ID,
  "trading_pair_id": TRADING_PAIR_ID,
  "timeframe": TIMEFRAME
}
```

> **Snapshot**

```json
{
    "channel_id": CHANNEL_ID,
    "snapshot":
        [
          [TIME, OPEN, CLOSE, HIGH, LOW, VOL],
          ...
        ]
}
```

> **Update**

```json
{
    "channel_id": CHANNEL_ID,
    "update":
        [
          [TIME, OPEN, CLOSE, HIGH, LOW, VOL],
          ...
        ]
}
```

After receiving the response, you will receive a snapshot of the candle data,
followed by updates upon any changes to the chart. Updates to the most recent
timeframe interval are emitted.

+ `TRADING_PAIR_ID`: Subscribe trading pair ID
    + enum[`BTC-USDT`, `ETH-USDT`, ...]
+ `TIMEFRAME`: Timespan granularity
    + enum[`1m`, `5m`, `15m`, `30m`, `1h`, `3h`, `6h`, `12h`, `1D`, `7D`, `14D`, `1M`]
+ `CHANNEL_ID`: The channel id for event type
    + string
+ `TRADING_PAIR_ID`: Trading pair ID
    + enum[`BTC-USDT`, `ETH-USDT`, ...]
+ `TIMEFRAME`: Timespan granularity
    + enum[`1m`, `5m`, `15m`, `30m`, `1h`, `3h`, `6h`, `12h`, `1D`, `7D`, `14D`, `1M`]
+ `CHANNEL_ID`: Channel ID
    + string
+ `TIME_STAMP`: Timestamp in milliseconds
    + string
+ `OPEN`: First price during the time frame
    + string
+ `CLOSE`: Last price during the time frame
    + string
+ `HIGH`: Highest price during the time frame
    + string
+ `LOW`: Lowest price during the time frame
    + string
+ `VOL`:  Trading volume of the time frame
    + string

## Ping/Pong

> **Request**

```json
{
  "action": "ping"
}
```

> **Response**

```json
{
  "event": "pong"
}
```

Send `ping` to test connection and extends disconnection timeout which is 64 seconds.

## Unsubscribe

> **Request**

```json
{
  "action": "unsubscribe",
  "channel_id": CHANNEL_ID
}
```

> **Response**

```json
{
  "event": "unsubscribed",
  "channel_id": CHANNEL_ID
}
```

Send unsubscribe action to unsubscribe channel
+ `CHANNEL_ID`: The channel id for event type
    + string
+ `CHANNEL_ID`: The channel id for event type
    + string

## WebSocket error code
Error code for the specified error event occured, server will reponse an error message including error code and request parameters. For example:

```json
{
  "event": "error",
  "code": 4001,
  "message": "undefined_action",
  "type": "ticker",
  "trading_pair_id": "BTC-USDT"
}
```

### Error Code

+ `4000`: undefined_error. Unknown error.
+ `4001`: undefined_action. Request action is not defined.
+ `4002`: cannel_not_found. Cound't found a  channel according the request.
+ `4003`: subscribe_failed. Failed to subscribe a channel for specified request.
+ `4004`: unsubsribe_failed. Failed to unsubscribe a channel for specified request.
+ `4005`: invalid_payload. request is not avliable.
+ `4006`: not_authenticated. Calling a authorization required chanel, but request without authorization.
+ `4007`: invalid_snapshot. Failed to get a snapshot.
+ `4008`: place_order_failed. Failed to place a order.
+ `4009`: cancel_order_failed. Failed to cancel a order.
+ `4010`: modify_order_failed. Failed to modify a order.


# Websocket V2

To reduce payload size, using abbreviation and supporting message compression (RFC 7692), and support extendable structure, using key-value pair, JSON payload would result in following schema:

```json
 {
 	"h": [],	// header: extendable payload header.
 				// Format: [channel_id, version, type]
 				//  * version for future iteration.
 				//  * type is defined according to resource.
 				//
 				// Generally, we have following types:
 				//  * "s" for snapshot
 				//  * "u" for update.
 				//
 				// For order response, we may have enum mapping to order type.

 	"d": [],	// data: array most time, will be ordered by uniqueness.
 				// For exmpale:
 				//	* data with uuid, uuid would be the first
 				//	* data without uuid, timestamp is more
 				//      distinguishable than other fields.

 }
```

## Common Parameters

*NOTE: all fields are converted to string for correct precision*

**Version**

+ `2`: first version after v2 payload announced.

**Type**

For control response (see sessions below):

+ `pong`
+ `subscribe`
+ `unsubscribe`
+ `error`

For data response (seed sessions below):

+ `s`: snapshot
+ `u`: update


## Control Request/Response

## Ping/Pong

Ping/pong extends disconnection timeout. If no ping/pong message recieved, connection will be dropped by server in 64 seconds after last seen ping/pong message.

> **Request**

```json
{
  "action": "ping"
}
```

> **Response**

```json
{
    // [channel_id, version, type]
    "h": ["", "2", "pong"],
    "d": []
}
```

## Subscribe

Please check channels below. the optional parameters are different from channel to channel.

## Unsubscribe

Unsubscribe from given channel to reduce unused data stream.

**PARAMS**

+ `CHANNEL_ID`: recieved from subscribe request and response.

> **Request**

```json
{
  "action": "unsubscribe",
  "type": CHANNEL_ID

}
```

> **Response**

```json
{
    // [channel_id, version, type]
    "h": ["trade.ETH-BTC", "2", "unsubscribed"],
    "d": []
}
```

## Error

Error code for the specified error event occured, server will reponse an error message including error code. For example:

**Error Code**

+ `4000`: undefined_error. Unknown error.
+ `4001`: undefined_action. Request action is not defined.
+ `4002`: cannel_not_found. Cound't found a  channel according the request.
+ `4003`: subscribe_failed. Failed to subscribe a channel for specified request.
+ `4004`: unsubsribe_failed. Failed to unsubscribe a channel for specified request.
+ `4005`: invalid_payload. request is not avliable.
+ `4006`: not_authenticated. Calling a authorization required chanel, but request without authorization.
+ `4007`: invalid_snapshot. Failed to get a snapshot.
+ `4008`: place_order_failed. Failed to place a order.
+ `4009`: cancel_order_failed. Failed to cancel a order.
+ `4010`: modify_order_failed. Failed to modify a order.
+ `4011`: invalid_client_version. Not supported client.
+ `4012`: order_operation_rate_limit. Order operation (including place, modify, cancel) reaches rate limit. Note that limit counter are platform-wide, counting both REST and websocket.

> **Response**

```json
{
    // [channel_id, version, type, error_code, msg]
    "h": ["", "2", "error", "4002", "channel_not_found"],
    "d": []
}
```

## Channel Request/Response

## Order [Auth]

Order response provides extra information for recognition, the following sessions show all values of field enumerations.

**Type**

+ `0`: limit
+ `1`: market
+ `2`: market_stop
+ `3`: limit_stop
+ `4`: trailing_fiat_stop       (not valid yet)
+ `5`: fill_or_kill             (not valid yet)
+ `6`: trailing_percent_stop    (not valid yet)

**Event**

+ `opened`: order placed.
+ `modified`: order modified.
+ `executed`: order executed/matched.
+ `triggered`: conditional order been triggered.
+ `cancelled`: order cancelled.
+ `cancel_pending`: server is processing cancelation.
+ `cancel_rejected`: cancel request is rejected.
+ `modify_rejected`: modify request is rejected.
+ `execute_rejected`: rejected while executing.
+ `trigger_rejected`: rejected while triggering.

**State**

+ `queued`
+ `open`
+ `partially_filled`
+ `filled`
+ `cancelled`
+ `pending_cancellation`
+ `rejected`
+ `triggered`

**Side**

+ `ask`
+ `bid`

**PARAMS**

+ `ORDER_ID`: order's ID.
+ `TIMESTAMP`: order's timestamp.
+ `COMPLETED_AT`: order executed timestamp.
+ `TRADING_PAIR_ID`: trading pairs ID
+ `STATE`: order state, the state saved in database.
+ `EVENT`: order event, the state changing event.
+ `SIDE`: place side
+ `PRICE`: order price
+ `EQ_PRICE`: equal/average price
+ `SIZE`: order size
+ `PARIIAL_FILLED_SIZE`: partially filled size
+ `STOP_PRICE`: conditional stop price

> **Request**

```json
{
  "action": "subscribe",
  "type": "order"
}
```

> **Response**

##Limit Order

```json
{
    // [channel_id, version, type]
    "h": ["order", "2", "u", "0"],
    "d": [
        ORDER_ID,
        TIMESTAMP,
        COMPLETED_AT,
        TRADING_PAIR_ID,
        STATE,
        EVENT,
        SIDE,
        PRICE,
        EQ_PRICE,
        SIZE,
        PARTIAL_FILLED_SIZE
    ]
}
```

##Market Order

```json
{
    // [channel_id, version, type]
    "h": ["order", "2", "u", "1"],
    "d": [
        ORDER_ID,
        TIMESTAMP,
        COMPLETED_AT,
        TRADING_PAIR_ID,
        STATE,
        EVENT,
        SIDE,
        EQ_PRICE,
        SIZE,
        PARTIAL_FILLED_SIZE
    ]
}
```

##Market Stop Order

```json
{
    // [channel_id, version, type]
    "h": ["order", "2", "u", "3"],
    "d": [
        ORDER_ID,
        TIMESTAMP,
        COMPLETED_AT,
        TRADING_PAIR_ID,
        STATE,
        EVENT,
        SIDE,
        EQ_PRICE,
        SIZE,
        PARTIAL_FILLED_SIZE,
        STOP_PRICE
    ]
}
```

##Limit Stop Order

```json
{
    // [channel_id, version, type]
    "h": ["order", "2", "u", "4"],
    "d": [
        ORDER_ID,
        TIMESTAMP,
        COMPLETED_AT,
        TRADING_PAIR_ID,
        STATE,
        EVENT,
        SIDE,
        PRICE,
        EQ_PRICE,
        SIZE,
        PARTIAL_FILLED_SIZE,
        STOP_PRICE
    ]
}
```

## Orderbook

After receiving the response, you will receive a snapshot of the book, followed by updates upon any changes to the book.
The updates is published as **DIFF**.

**PARAMS**

+ `PRECISION`: available precisions could be acquired from REST, endpoint: `/v1/market/orderbook/precisions/<trading_pair_id>`
+ `PRICE`: order price
+ `SIZE`: order amount, diff maybe minus value
+ `COUNT`: order count, diff maybe minus value

> **Request**

```json
{
  "action": "subscribe",
  "type": "order-book",
  "trading_pair_id": TRADING_PAIR_ID
  "precision": PRECISION
}
```

> **Response**

```json
{
    // [channel_id, version, type]
    "h": ["order-book.COB-ETH.1E-7", "2", "u"],
    "d": {
        "bids": [
            [ PRICE, SIZE, COUNT ],
            ...
        ],
        "asks": [
            [ PRICE, SIZE, COUNT ],
            ...
    }
}
```

## Trade

After receiving the response, you will start receiving recent trade,
followed by any trade that occurs at COBINHOOD.

**PARAMS**

+ `TRADING_PAIR_ID`: Subscribe trading pair ID
+ `TRADE_ID`: Trade ID
+ `TIME_STAMP`: Trade timestamp in milliseconds
+ `PRICE`: Trade quote price
+ `SIZE`: Trade base amount
+ `MAKER_SIDE`: The order side

> **Request**

```json
{
  "action": "subscribe",
  "type": "trade",
  "trading_pair_id": TRADING_PAIR_ID
}
```

> **Response**

```json
{
    "h": ["trade.COB-ETH", "2", "u"],
    "d":
        [
          [TRADE_ID, TIME_STAMP, PRICE, SIZE, MAKER_SIDE],
          ...
        ]
}
```

### Ticker

+ `TRADING_PAIR_ID`: Subscribe trading pair ID
+ `TIME_STAMP`: Ticker timestamp in milliseconds
+ `HIGHEST_BID`: Best bid price in current order book
+ `LOWEST_ASK`: Best ask price in current order book
+ `24H_VOLUME`: Trading volume of the last 24 hours
+ `24H_LOW`: Lowest trade price of the last 24 hours
+ `24H_HIGH`: Highest trade price of the last 24 hours
+ `LAST_TRADE_PRICE`: Latest trade price

> **Request**

```json
{
  "action": "subscribe",
  "type": "ticker",
  "trading_pair_id": TRADING_PAIR_ID
}
```

> **Response**

```json
{
    "h": ["ticker.COB-ETH", "2", "u"],
    "d": [
        [
          TIME_STAMP,
          HIGHEST_BID,
          LOWEST_ASK,
          24H_VOLUME,
          24H_HIGH,
          24H_LOW,
          24H_OPEN,
          LAST_TRADE_PRICE
        ]
    ]
}
```


## Candle

After receiving the response, you will receive a snapshot of the candle data,
followed by updates upon any changes to the chart. Updates to the most recent
timeframe interval are emitted.

**Timeframe**

+ `1m`: 1 minute
+ `5m`: 5 minute
+ `15m`: 15 minute
+ `30m`: 30 minute
+ `1h`: 1 hour
+ `3h`: 3 hour
+ `6h`: 6 hour
+ `12h`: 12 hour
+ `1D`: 1 day
+ `7D`: 7 day
+ `14D`: 14 day
+ `1M`: 1 month

**PARAMS**

+ `TRADING_PAIR_ID`: Subscribe trading pair ID
+ `TIMEFRAME`: Timespan granularity, check enumeration above
+ `TIME_STAMP`: Timestamp in milliseconds
+ `VOL`:  Trading volume of the time frame
+ `HIGH`: Highest price during the time frame
+ `LOW`: Lowest price during the time frame
+ `OPEN`: First price during the time frame
+ `CLOSE`: Last price during the time frame

> **Request**

```json
{
  "action": "subscribe",
  "type": "candle",
  "trading_pair_id": TRADING_PAIR_ID,
  "timeframe": TIMEFRAME
}
```

> **Response**

```json
{
    "channel_id": CHANNEL_ID,
    "snapshot":
        [
          [TIME_STAMP, VOL, HIGH, LOW,OPEN, CLOSE],
          ...
        ]
}
```
